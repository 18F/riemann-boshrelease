(info "Loading memory alerts")

(defn memory-alerts [pd]
  (info "Setting up memory alerts")
  (where (service "memory/percent-used")
    (smap
      (fn [event]
        ; set the event's state based on the value of the metric, and possibly the specific host it originated from
        (assoc event
          :state (cond
          <% p("riemann.memory.overrides").each do |over| %>
            (and (re-matches #"<%= over["host"] %>" (:host event)) (> (:metric event) <%= over["threshold"] %>)) "<%= over["state"] %>"
          <% end %>
            (> (:metric event) <%= p("riemann.memory.critical") %>) "critical"
            (> (:metric event) <%= p("riemann.memory.warn") %>) "warn"
            :else "ok"
          )
          :description (cond
          <% p("riemann.memory.overrides").each do |over| %>
            <% if entry.key?("description") %>
            (and (re-matches #"<%= over["host"] %>" (:host event)) (> (:metric event) <%= over["threshold"] %>)) "<%= over["description"] %>"
            <% end %>
          <% end %>
            :else nil
          )

        )
      )

      (by [:host :service]
        ; only act on state changes when they've been stable for 5 minutes
        (stable 300 :state
          (changed-state {:init "ok"} (
            where (state "ok") (:resolve pd)
            (else (where (state "critical") (:trigger pd)
            (else (where (state "warn") #(warn "Free memory is low: " %)
          ))))))
        )
      )
    )
  )
)
